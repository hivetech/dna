#! /bin/bash
#
# synthetize.sh
# Copyright (C) 2013 Xavier Bruhiere
#
# Distributed under terms of the MIT license.
#


trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT
set -e

### end common-components/exit-trap
#TODO flag to setup the target for fireball use

# const (
    INVENTORY=$(locate -b '\hosts' | grep dna)
    DNA_ROOT=$(locate -l 1 -b -r "^dna$")
    DATA=data.yml
    PARALLEL_LEVEL=10
    #FIXME home is a temporary hard coded value
    TARGET_HOME=/home/prototype
# )

# Synthetize needs ansible and docker to work
function check_dependencies() {
    #TODO Check for ansible installation (and right version)
    #TODO Check for docker installation (and right version)
    #TODO Check for ansible-shell
    echo 0
}

function is_installed() { command -v $1 > /dev/null }

function play_playbook() {
    #ansible-playbook ${playbook} --check --diff --ask-sudo-pass \
    ansible-playbook ${playbook} --ask-sudo-pass ${check} \
        -u ${user} -i ${INVENTORY} -f $PARALLEL_LEVEL --verbose \
        --extra-vars "data=${DATA} hosts=${target_hosts} home=${TARGET_HOME} dna_root=${DNA_ROOT}"
}

function build_prototype_image() {
    test -f Dockerfile || exit 1
    docker build -rm -t ${image} - < $dockerfile
}

function is_built() {
    image=$1
    OUTPUT=$(docker images | grep ${image})

    if [ -z "$OUTPUT" ]; then
        echo 1
    else
        echo 0
    fi
}

function is_running() {
    image=$1
    OUTPUT=$(docker ps | grep ${image})

    if [ -z "$OUTPUT" ]; then
        echo 1
    else
        echo 0
    fi
}

function log () {
    if [ "$verbose" == "true" ]; then
        printf "\r\033[00;36m  [ \033[00;34m..\033[00;36m ] $1\033[0m\n"
    fi
}


function success () {
    if [ "$verbose" == "true" ]; then
        printf "\r\033[00;36m  [ \033[00;32mOK\033[00;36m ] $1\033[0m\n"
    fi
}


function fail () {
    if [ "$verbose" == "true" ]; then
        printf "\r\033[00;36m  [\033[00;31mFAIL\033[00;36m] $1\033[0m\n"
        echo ''
    fi
}


function die()
{
    fail "${@}"
    exit 1
}

function pre_processing() {
    if [[ $(check_dependencies) -eq 1 ]]; then
        die "unable to satisfie $0 requirements"
    else
        success "$0 requirements satisfied"
    fi

    if [ "$action" == "prototype" ]; then
        target_hosts="prototype"
        user="prototype"
    fi

    if [[ "$check" == "true" ]]; then
        check="--check --diff"
    else
        check=""
    fi
}

function main() {
    if [ "$action" == "interactive" ]; then
        if [[ $(is_running $image) -eq 0 ]]; then
            log "Found $image running, initiating interactive mode"
            log "Use 'cd hostname' once connected to interact with your hosts"
            ansible-shell
        else
            die "No $image running, build it if necessary and run it and restart"
        fi

    elif [ "$action" == "build" ]; then
        log "Building $image"
        build_prototype_image

    elif [ "$action" == "analysis" ]; then
	    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${user}@127.0.0.1 -p ${port}

    else
        if [ "$action" == "prototype" ]; then
            log "Prototype mode, setup docker..."
            if [[ $(is_built $image) -eq 0 ]]; then
                log "Found $image docker image, moving on"
            else
                log "no $image found locally, searching online..."
                output=$(docker pull $image)
                if [[ $? -eq 1 ]]; then
                    log "unable to fetch $image, building it"
                    build_prototype_image
                else
                    log "$image successfully pulled from repository"
                fi
            fi

            if [[ $(is_running $image) -eq 0 ]]; then
                log "Found $image running, moving on"
            else
                log "No $image running, starting it"
                docker run -d -p $port:22 $image
            fi

        elif [ "$action" == "target" ]; then
            log "Synthetizing target environment: $target_hosts"
        else
            die "unknown command: $action"
        fi
        log "Playing ansible playbook: $playbook"
        play_playbook
    fi
    success "Done"
}

# cli management
source ./optparse.bash

optparse.define short=a long=action desc="Command to run" variable=action default="test"
optparse.define short=u long=user desc="Ansible user" variable=user default="prototype"
optparse.define short=i long=image desc="Image to use with docker" variable=image default="hivetech/prototype"
optparse.define short=v long=verbose desc="Flag to set verbose mode on" variable=verbose value=true default=false
optparse.define short=c long=check desc="Check mode, will not apply change" variable=check value=true default=false
optparse.define short=p long=port desc="Container ssh port to expose" variable=port default="49500"
optparse.define short=b long=playbook desc="Playbook to test" variable=playbook default="provision/ansible/site.yml"
optparse.define short=t long=target desc="Target hosts group to configure, as defined in the inventory" variable=target_hosts default="localhost"
optparse.define short=d long=dockerfile desc="Dockerfile used to build the image" variable=dockerfile default="Dockerfile"

source $( optparse.build )
# --------------

pre_processing

main

exit 0
