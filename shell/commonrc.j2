#TODO Ask user choice before installing go, python or node version (this is long process)
# ------------------------------------------------------------ Constants
# Assumptions (born to be tuned):
#    - Your IT projects are in $HOME/dev/projects
#    - You use node version 0.10.7
#export PROJECTS=$HOME/dev/projects
export OPENLIBS={{ openlibs }}
export NODE_VERSION={{ dev.node_version }}
export GO_VERSION={{ dev.go_version }}
export PYTHON_VERSION={{ dev.python_version }}
export RUBY_VERSION={{ dev.ruby_version }}
export EDITOR={{ editor }}

TIME=`date +"%T"`

# Registering useful paths
# Customize to your needs...
export CDPATH=.:~:$HOME/dev/projects
export LD_LIBRARY_PATH=/usr/local/lib
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig 
#export TERM="xterm-256color"

test -d $HOME/local/bin && PATH="$HOME/local/bin:$PATH"
test -d $HOME/local/lib && PATH="$HOME/local/lib:$PATH"

# ------------------------------------------------------------- Functions
# Useful personal function, a little combinaison of two other one
function mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }
function up()
{
    LIMIT=$1
    P=$PWD
    for ((i=1; i <= LIMIT; i++))
    do
        P=$P/..
    done
    cd $P
    export MPWD=$P
}

function back()
{
    LIMIT=$1
    P=$MPWD
    for ((i=1; i <= LIMIT; i++))
    do
        P=${P%/..}
    done
    cd $P
    export MPWD=$P
}

#TODO Should it be replaced by https://github.com/simonwhitaker/gitignore-boilerplates ?
# Command line access to http://gitignore.io/, powered by https://github.com/github/gitignore
function gi() { curl http://gitignore.io/api/$@ ;}

# ------------------------------------------------------------- Plugins
# Node version management
#[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh  # This loads NVM
if [[ -s $HOME/.nvm/nvm.sh ]]; then
    . $HOME/.nvm/nvm.sh  # This loads NVM
    if [ -z "$(nvm list | grep $NODE_VERSION)" ]; then
      echo "Node $NODE_VERSION not found, install it..."
      nvm install $NODE_VERSION
    else
      nvm use v$NODE_VERSION
    fi
    [[ -r $NVM_DIR/bash_completion ]] && . $NVM_DIR/bash_completion
    export NODE_PATH=$HOME/.nvm/v$NODE_VERSION/lib/node_modules
    export NODE_ENV=development
fi

# Python virtualenv made easy
#test -f /usr/local/bin/virtualenvwrapper.sh && source /usr/local/bin/virtualenvwrapper.sh && export WORKON_HOME=$HOME/.virtualenvs
#TODO Testing https://github.com/brainsik/virtualenv-burrito

# z is the new j, yo (https://github.com/rupa/z.git)
test -d $OPENLIBS/z && source $OPENLIBS/z/z.sh

# Adds numbered shortcuts to the output git status, and much more (https://github.com/ndbroadbent/scm_breeze.git)
[ -s "$HOME/.scm_breeze/scm_breeze.sh" ] && source "$HOME/.scm_breeze/scm_breeze.sh"

# script for automatic environment
test -d $OPENLIBS/autoenv && source $OPENLIBS/autoenv/activate.sh

### Added by the Heroku Toolbelt
test -d /usr/local/heroku && export PATH="/usr/local/heroku/bin:$PATH"

# A full-featured & carefully designed adaptive prompt for Bash & Zsh
test -d $OPENLIBS/liquidprompt && source $OPENLIBS/liquidprompt/liquidprompt

# A BASH wrapper for getopts, for simple command line arguments
test -d $OPENLIBS/optparse && source $OPENLIBS/optparse/optparse.bash

# Python interpreter management
if [[ -d $HOME/.pyenv ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  if [ -z "$(pyenv local | grep -e ^$PYTHON_VERSION$)" ]; then
      echo "Python $PYTHON_VERSION not found, install it..."
    pyenv install $PYTHON_VERSION
  fi
  pyenv local $PYTHON_VERSION
  echo "Now using python $PYTHON_VERSION"
fi

# Go version management
if [[ -d $HOME/.gvm ]]; then
  . $HOME/.gvm/scripts/gvm
  if [ -z "$(gvm list | grep $GO_VERSION)" ]; then
    echo "Go $GO_VERSION not found, install it..."
    gvm install $GO_VERSION
  fi
  gvm use $GO_VERSION
fi

# Enable cheatsheets color syntaxing
test -d $HOME/.cheat && export CHEATCOLORS=true

# Make stderr output red
export LD_PRELOAD="$OPENLIBS/stderred/build/libstderred.so${LD_PRELOAD:+:$LD_PRELOAD}"

# hub helps you win at git. http://hub.github.com/
#FIXME Prevent at least scm_breeze plugin to work
#eval "$(hub alias -s)"

if [[ -d $HOME/.rbenv ]]; then
  # Rbenv initialisation (ruby version manager)
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"

  # Check if requested ruby version is installed
  if [ -z "$(rbenv versions | grep $RUBY_VERSION)" ]; then
    echo "Ruby $RUBY_VERSION not found, install it..."
    rbenv install $RUBY_VERSION
  fi
  echo "Now using ruby $RUBY_VERSION"
  rbenv global $RUBY_VERSION
fi
